// Generated by CoffeeScript 1.7.1
(function() {
  (function($) {
    var browser, getBrowser, jqFile, jqFileUtils, uaMatch;
    getBrowser = function() {
      var a, b;
      a = uaMatch(navigator.userAgent);
      b = {};
      if (a.browser) {
        b[a.browser] = true;
        b.version = a.version;
      }
      if (b.chrome) {
        b.webkit = true;
      } else {
        if (b.webkit) {
          b.safari = true;
        }
      }
      return b;
    };
    uaMatch = function(b) {
      var a;
      b = b.toLowerCase();
      a = /(chrome)[ \/]([\w.]+)/.exec(b) || /(webkit)[ \/]([\w.]+)/.exec(b) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(b) || /(msie) ([\w.]+)/.exec(b) || b.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(b) || [];
      return {
        browser: a[1] || "",
        version: a[2] || "0"
      };
    };
    browser = getBrowser();
    jqFileUtils = {
      hash: function() {
        return Math.random().toString(36).substr(2);
      },
      valExt: function(ext, eReg) {
        var expr, flag;
        expr = new RegExp(eReg, "gi");
        flag = expr.test(ext);
        return flag;
      },
      validSize: function(file, maxSize) {
        var sz;
        if (browser.msie) {
          return true;
        }
        sz = file[0].files[0].size;
        if (parseInt(sz) <= maxSize) {
          return true;
        } else {
          return false;
        }
      },
      messages: {
        "0": "No se cargo un archivo",
        "1": "El archivo a cargar no esta permitido",
        "2": "El archivo excede su peso"
      }
    };
    jqFile = (function() {
      function jqFile(options) {
        var opt;
        opt = {
          areaFile: ".areaFile",
          content: "body",
          html5: false,
          dragdrop: true,
          routeFile: "jqFile",
          multipleFile: false,
          createFile: true,
          limitFiles: -1,
          nameFile: "inputFile",
          methodForm: "POST",
          eReg: "jpg|gif|png|jpeg|bmp",
          maxSize: 2097152,
          success: null,
          processCharge: null,
          dragEnter: null,
          dragLeave: null,
          error: null,
          errorValid: null,
          errorBrowser: null,
          errorLimit: null,
          beforeCharge: null,
          afterCharge: null
        };
        this.settings = $.extend(opt, options);
        this.arquitect = {};
        this._init();
      }

      jqFile.prototype._init = function() {
        this._arquitect();
        return this._bindEvents();
      };

      jqFile.prototype._arquitect = function() {
        var settings, _this;
        _this = this;
        settings = this.settings;
        this.arquitect.areaFile = $(settings.areaFile);
        this.arquitect.content = $(settings.content);
        if (!settings.html5) {
          this._createIframe();
        }
        return this._createFile();
      };

      jqFile.prototype._bindEvents = function() {
        var arquitect, settings, validFile, _this;
        _this = this;
        settings = this.settings;
        arquitect = this.arquitect;
        validFile = null;
        this._evtInpt();
        if (!settings.html5) {
          return this._evtIframe();
        } else if (settings.dragdrop) {
          return this._evtDragDrop();
        }
      };

      jqFile.prototype._createFile = function() {
        var idIframe, settings, _this;
        _this = this;
        settings = this.settings;
        idIframe = this.arquitect.idIframe;
        if (settings.createFile === true) {
          return this._newFile();
        } else {
          this.arquitect.file = $("input[name='" + settings.nameFile + "']");
          this.arquitect.form = this.arquitect.file.parents("form");
          if (!settings.html5) {
            this.arquitect.form.attr("target", idIframe);
          }
          return this.arquitect.form.attr("action", settings.routeFile);
        }
      };

      jqFile.prototype._createIframe = function() {
        var idIframe, settings;
        settings = this.settings;
        idIframe = jqFileUtils.hash();
        this.arquitect.idIframe = idIframe;
        this.arquitect.iframe = $("<iframe />", {
          "name": idIframe,
          "id": idIframe,
          "src": "javascript:false;",
          "style": "display:none;"
        });
        return this.arquitect.content.append(this.arquitect.iframe);
      };

      jqFile.prototype._newFile = function(idIframe) {
        var file, optFile, settings;
        settings = this.settings;
        optFile = this._settingsFile();
        this.arquitect.form = $("<form />", {
          "id": "frmJqFile-" + jqFileUtils.hash(),
          "action": settings.routeFile,
          "method": settings.methodForm,
          "enctype": "multipart/form-data",
          "target": this.arquitect.idIframe
        });
        this.arquitect.form.css(optFile.form);
        file = {
          "type": "file",
          "name": settings.nameFile
        };
        if (settings.multipleFile) {
          file["multiple"] = "multiple";
        }
        this.arquitect.file = $("<input />", file);
        this.arquitect.file.css(optFile.file);
        this.arquitect.form.append(this.arquitect.file);
        return this.arquitect.content.append(this.arquitect.form);
      };

      jqFile.prototype._settingsFile = function() {
        var areaFile, content, cssFile, cssForm, dimentions, posBtn, posCtn, positions;
        areaFile = this.arquitect.areaFile;
        content = this.arquitect.content;
        dimentions = {
          "width": areaFile.outerWidth(),
          "height": areaFile.outerHeight()
        };
        posBtn = areaFile.offset();
        posCtn = content.offset();
        positions = {
          "top": posBtn.top - posCtn.top,
          "left": posBtn.left - posCtn.left
        };
        cssForm = {
          "position": "absolute",
          "overflow": "hidden",
          "-ms-filter": "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)",
          "filter": "alpha(opacity=0)",
          "opacity": 0,
          "z-index": "99"
        };
        cssFile = {
          "display": "block",
          "font-size": "999px",
          "cursor": "pointer"
        };
        cssForm = $.extend(cssForm, dimentions, positions);
        cssFile = $.extend(cssFile, dimentions);
        return {
          "form": cssForm,
          "file": cssFile
        };
      };

      jqFile.prototype._evtIframe = function() {
        var arquitect, settings, _this;
        _this = this;
        settings = this.settings;
        arquitect = this.arquitect;
        return arquitect.iframe.bind("load", function() {
          var json, response;
          response = browser.msie && parseInt(browser.version.substr(0, 1)) <= 8 ? window.frames[arquitect.idIframe].document.body.innerHTML : arquitect.iframe[0].contentDocument.body.innerHTML;
          if (response !== "false") {
            json = (new Function("return " + response))();
            settings.afterCharge && settings.afterCharge();
            settings.success && settings.success(json);
            return arquitect.form.show();
          }
        });
      };

      jqFile.prototype._evtInpt = function() {
        var arquitect, settings, validFile, _this;
        _this = this;
        settings = this.settings;
        arquitect = this.arquitect;
        validFile = null;
        return arquitect.file.bind("change", function(event) {
          if (!settings.html5) {
            validFile = _this._validFile.call(this, settings);
            if (validFile) {
              settings.beforeCharge && settings.beforeCharge();
              return arquitect.form.hide().submit();
            }
          } else {
            return _this._processFile(event.target);
          }
        });
      };

      jqFile.prototype._evtDragDrop = function() {
        var arquitect, settings, _this;
        _this = this;
        settings = this.settings;
        arquitect = this.arquitect;
        _this._addEvent(arquitect.form, "dragover", function(e) {
          e.preventDefault();
          return e.stopPropagation();
        });
        _this._addEvent(arquitect.form, "dragenter", function(e) {
          e.preventDefault();
          e.stopPropagation();
          arquitect.file.hide();
          return settings.dragEnter && settings.dragEnter();
        });
        _this._addEvent(arquitect.form, "dragleave", function(e) {
          e.preventDefault();
          e.stopPropagation();
          arquitect.file.show();
          return settings.dragLeave && settings.dragLeave();
        });
        return _this._addEvent(arquitect.form, "drop", function(e) {
          e.preventDefault();
          e.stopPropagation();
          _this._processFile(e.dataTransfer);
          return arquitect.file.show();
        });
      };

      jqFile.prototype._addEvent = function(el, evt, callback) {
        if (el[0].addEventListener) {
          return el[0].addEventListener(evt, callback);
        } else {
          return el[0].attachEvent(evt, callback);
        }
      };

      jqFile.prototype._processFile = function(event) {
        var arquitect, file, files, settings, validFile, validLimit, _i, _len, _results;
        settings = this.settings;
        arquitect = this.arquitect;
        files = event.files;
        validLimit = files.length <= settings.limitFiles ? true : false;
        if (validLimit) {
          validFile = this._validFilesHtml5(files);
          if (validFile) {
            settings.beforeCharge && settings.beforeCharge(arquitect.areaFile);
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              _results.push(this._sendFile(file));
            }
            return _results;
          }
        } else {
          return settings.errorLimit && settings.errorLimit();
        }
      };

      jqFile.prototype._sendFile = function(file) {
        var arquitect, objData, settings;
        settings = this.settings;
        arquitect = this.arquitect;
        objData = new FormData();
        objData.append("inputFile", file);
        return $.ajax({
          contentType: false,
          processData: false,
          type: "POST",
          "url": settings.routeFile,
          "cache": false,
          "data": objData,
          "xhr": function() {
            var xhrobj;
            xhrobj = $.ajaxSettings.xhr();
            if (xhrobj.upload) {
              xhrobj.upload.addEventListener('progress', function(event) {
                var percent, position, total;
                percent = 0;
                position = event.loaded || event.position;
                total = event.total;
                if (event.lengthComputable) {
                  percent = Math.ceil(position / total * 100);
                }
                return settings.processCharge && settings.processCharge(percent, event);
              }, false);
            }
            return xhrobj;
          },
          "success": function(json) {
            return settings.success && settings.success(json, arquitect.areaFile);
          }
        });

        /*arquitect.form.ajaxSubmit
        				"url": settings.routeFile
        				"data": fd
        				"processData": false,
        				"dataType": "json"
        				"uploadProgress": (e,position,total,percentComplete)->
        					console.log percentComplete
        					console.log total
        				"complete": (json)->
        					console.log json.responseJSON
         */

        /*$.ajax
        				"url": settings.routeFile
        				"method": "POST"
        				"data":<
        					"filename": file.name
        					"file": file
        				"success" : (json)->
        					console.log json
         */

        /*if xhr.upload
        				xhr.upload.addEventListener "progress", (e)->
        					percent= parseInt((e.loaded * 100)/ e.total )
        					console.log e
        					console.log e.loaded
        					console.log e.total
        					console.log percent
        					settings.processCharge and settings.processCharge(percent,e)
        				, false
        				xhr.onreadystatechange= (e)->
        					if xhr.readyState is 4
        						if xhr.status is 200
        							json= (new Function("return " + xhr.responseText))()
        							settings.success and settings.success(json,arquitect.areaFile)
        						else
        							settings.error and settings.error()
        				xhr.open "POST",settings.routeFile,true
        				xhr.setRequestHeader "X-FILENAME",file.name
        				xhr.send file
        			else
        				settings.errorBrowser and settings.errorBrowser()
         */
      };

      jqFile.prototype._validFilesHtml5 = function(files) {
        var arrParse, ext, file, settings, typeFile, valExt, _i, _len;
        settings = this.settings;
        ext = "";
        typeFile = "";
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          arrParse = file.name.split(".");
          typeFile = arrParse[arrParse.length - 1];
          valExt = jqFileUtils.valExt(typeFile, settings.eReg);
          if (file > settings.maxSize || !valExt) {
            if (!valExt) {
              settings.errorValid && settings.errorValid(1, jqFileUtils.messages["1"]);
            } else {
              settings.errorValid && settings.errorValid(2, jqFileUtils.messages["2"]);
            }
            return false;
          }
        }
        return true;
      };

      jqFile.prototype._validFile = function(settings) {
        var eReg, ext, file, srcFile, valExt, valSize;
        file = $(this);
        srcFile = file.val();
        ext = "";
        eReg = settings.eReg;
        if (srcFile !== "") {
          srcFile = srcFile.split("\\");
          srcFile = srcFile[srcFile.length - 1];
          ext = srcFile.split(".");
          ext = ext[ext.length - 1];
          valExt = jqFileUtils.valExt(ext, eReg);
          valSize = jqFileUtils.validSize(file, settings.maxSize);
          if (valExt && valSize) {
            return true;
          } else {
            if (!valExt) {
              settings.errorValid && settings.errorValid(1, jqFileUtils.messages["1"]);
            } else {
              settings.errorValid && settings.errorValid(2, jqFileUtils.messages["2"]);
            }
            return false;
          }
        } else {
          settings.errorValid && settings.errorValid(0, jqFileUtils.messages["0"]);
          return false;
        }
      };

      return jqFile;

    })();
    $.extend({
      jqFile: function(json) {
        new jqFile(json);
      }
    });
  })(jQuery);

}).call(this);
